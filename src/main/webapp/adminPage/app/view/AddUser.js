/*
 * File: app/view/AddUser.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Xixixi.view.AddUser', {
    extend: 'Ext.window.Window',
    alias: 'widget.adduser',

    requires: [
        'Xixixi.view.AddUserViewModel',
        'Ext.form.Panel',
        'Ext.XTemplate',
        'Ext.form.field.ComboBox'
    ],

    viewModel: {
        type: 'adduser'
    },
    autoShow: true,
    height: 475,
    hidden: false,
    id: 'addUserWindow',
    minHeight: 450,
    resizable: false,
    width: 560,
    title: '添加用户',
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            flex: 1,
            id: 'addUserForm',
            itemId: 'addUserForm',
            margin: '10 10 10 10',
            bodyPadding: 10,
            bodyStyle: 'background:#DFE8F6;\r\nborder:1px solid #B5B8C8',
            header: false,
            title: 'My Form',
            items: [
                {
                    xtype: 'textfield',
                    validator: function(value) {
                        //if(value.length >= 3){
                        //var result = this.validateUserName(value);

                        //  return result;
                        return true;
                        //}
                    },
                    anchor: '100%',
                    id: 'username',
                    itemId: 'username',
                    maxWidth: 500,
                    modelValidation: true,
                    width: 500,
                    afterLabelTextTpl: [
                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                    ],
                    fieldLabel: '用户名',
                    labelAlign: 'right',
                    labelPad: 10,
                    labelWidth: 120,
                    name: 'userName',
                    validateOnChange: false,
                    allowBlank: false,
                    allowOnlyWhitespace: false,
                    regex: /^[a-z0-9_]{3,15}$/,
                    regexText: '用户名必须由3-15个大小写字母，数字或下划线组成',
                    listeners: {
                        blur: 'onUsernameBlur'
                    }
                },
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    id: 'password',
                    itemId: 'password',
                    maxWidth: 500,
                    width: 500,
                    afterLabelTextTpl: [
                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                    ],
                    fieldLabel: '密码',
                    labelAlign: 'right',
                    labelPad: 10,
                    labelWidth: 120,
                    name: 'passWord',
                    inputType: 'password',
                    allowBlank: false,
                    allowOnlyWhitespace: false,
                    regex: /((?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})/,
                    regexText: '密码必须长6-20，包含一个大写字母，一个小写字母，一个数字合一个特殊字符（“@#$%”）'
                },
                {
                    xtype: 'textfield',
                    validator: function(value) {
                        var password = Ext.getCmp('password').getValue();

                        if (password == value)
                        return true;
                        else
                        return "密码不匹配";
                    },
                    anchor: '100%',
                    id: 'password_repeat',
                    itemId: 'password_repeat',
                    maxWidth: 500,
                    afterLabelTextTpl: [
                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                    ],
                    fieldLabel: '确认密码',
                    labelAlign: 'right',
                    labelPad: 10,
                    labelWidth: 120,
                    name: 'passwordRepeat',
                    inputType: 'password',
                    allowBlank: false,
                    allowOnlyWhitespace: false,
                    regex: /((?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})/,
                    regexText: '密码必须长6-20，包含一个大写字母，一个小写字母，一个数字合一个特殊字符（“@#$%”）'
                },
                {
                    xtype: 'combobox',
                    anchor: '100%',
                    id: 'departmentcombo',
                    itemId: 'departmentcombo',
                    maxWidth: 500,
                    width: 500,
                    afterLabelTextTpl: [
                        '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                    ],
                    fieldLabel: '部门',
                    labelAlign: 'right',
                    labelPad: 10,
                    labelWidth: 120,
                    name: 'deparment',
                    allowBlank: false,
                    editable: false,
                    displayField: 'name',
                    forceSelection: true,
                    store: 'DepartmentListStore',
                    valueField: 'attribute',
                    listeners: {
                        change: 'onDepartmentcomboChange',
                        focus: 'onDepartmentcomboFocus'
                    }
                }
            ]
        }
    ],

    onUsernameBlur: function(component, event, eOpts) {
        var value = component.getValue();
        //Ext.Msg.alert(this,this);
        var result = this.validateUserName(value);
        Ext.Msg.alert(result,result);

    },

    onDepartmentcomboChange: function(field, newValue, oldValue, eOpts) {

    },

    onDepartmentcomboFocus: function(component, event, eOpts) {
        var store = Ext.data.StoreManager.lookup('DepartmentListStore');
        console.log(store);
        store.setProxy({
            type: 'ajax',
            url: 'getAllDepartment.action',
            reader: {
                type: 'json',
                rootProperty: 'results'
            },
            listeners: {
                exception:{
                    fn:function(server,response,operation,options){
                        var result = Ext.JSON.decode(response.responseText);
                        Ext.MessageBox.show({
                            title: '服务器出错',
                            msg: result.message,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.Msg.OK

                        });
                    }
                }
            }
        });
        store.load({
            scope: this,
            callback: function(records, operation,success){
                if(records.length === 0){
                    Ext.Msg.alert('提示','没有可选部门，请先加入部门！');
                }
            }
        });
    },

    validateUserName: function(value) {
        var result = false;
        Ext.Ajax.setTimeout(20000);
        Ext.Ajax.request({
                                    url:'admin/userIdValidate.action',
                                    method: 'GET',
                                    async: false,
                                    params :{
                                        userName : value
                                    },
                                    success: function(response){
                                        var respText = Ext.JSON.decode(response.responseText);
                                        if(respText.success)
                                        result = true;
                                        else
                                        result = value + "已经存在！";

                                    },
                                    failure: function(form,action){
                                        result = "验证用户名出错";
                                    }

                                });
                                return result;
    }

});